12/09/20
Error Handling and Contracts

I have been thinking a lot about errors lately, mainly from trying to find a suitable standard for error reporting in the compiler, but also from watching a
talk on how errors are handled in the programming language !(zig, Zig). This raised the question: *"how should errors be handled in the language?"*, and
furthermore: *"what is considered an error?"*. 

<h1>Classes of Errors</h1>
Before we delve into the error handling, lets define some terms. Based on my experience in systems and
game programming, I find it natural to group errors into the following "classes":
<ul>
	<li><b style="display: inline-block; width: 14ch">Correctness</b> - errors making the program semantically invalid</li>
	<li><b style="display: inline-block; width: 14ch">Panic</b> - errors the program cannot recover from</li>
	<li><b style="display: inline-block; width: 14ch">State changing</b> - errors that change the execution state to another perfectly valid state</li>
</ul>

*Correctness errors* are what you might call compile-time errors, and happen when the program does not pass checks in the parsing or type checking stage. In th
is language the correctness class also encompasses errors emitted from a metaprogram controlling the compilation. The handling of these errors is up to the
compiler, and is at this point a solved problem (PS: During the multithreaded stage of the compiler caught errors will be accumulated and when all current
tasks are finished, the appropriate error is reported. This is done to ensure deterministic error reports). 
<br><br>
*Panic* and *state changing* errors are however a runtime problem. If we can all agree that either hard crashing the program, or launching some error reporting
tool and the hard crashing the program, is a valid way of solving the *panic* class of errors, and that is perfectly valid and reasonable to use an assertion,
or a call to an abort function, to solve these problems we can move onto the real problem: handling *state changing* errors.

<h1>Two Ways of Handling "State Changing" Errors</h1>
*State changing* errors can range from not being unable to convert a string to a valid integer value, to loss of graphics device while rendering
an image. There are two traditional ways of handling *state changing* errors, namely: exceptions and error codes. They both serve the purpose of
being a medium for reporting that an error has occurred and supply relevant information. But if they both serve the same purpose, why do they differ, and
why haven't one been thrown away in favour of the other? Well, that is mainly because exceptions are complicated, may impose a performance hit and differ
greatly from normal control flow. Error codes on the other hand are easily ignored and may harm the legibility of the procedure signature if the language
does not support multiple return values. Personally, I find error codes more elegant, as they do not _strictly_ require any special language features, the
concept is simpler to _fully_ understand and what actually happens "behind the scenes" is clearly visible. As error codes fit the goal of this language
better than exceptions, I chose to use it as a base for the error handling in Otus.

<h1>"Necessary" Features for Handling "State Changing" Errors</h1>
There are no _special_ features that are strictly necessary for handling these kinds of errors, but there are features that make it easier, more consistent
and safer. One of these features is the ability to choose how general or specific you want to be when handling the error. Sometimes all that a program wants to
know is if some procedure _did or did not_ fail, and sometimes the program wants to know _exactly_ how it failed. Another feature that
should be present is the ability to create custom sets of error codes, and the ability to explicitly and undoubtedly restrict the possible error codes that can
possibly be returned from a procedure. Custom error codes can provide more granular information that more closely resembles the actual error, and the
ability to explicitly restrict the possibility space of error codes returned from a procedure will help prevent bad documentation (as the horrors of the
Microsoft win32 docs). In addition, the language needs to support a clean and concise way of describing, returning and inspecting these error codes.

<h1>"Contracts"</h1>
As stated in the previous paragraph, there needs to be a clear way of explicitly specifying the possible error codes a procedure can return, which could be
described as, and will hereby be nick named, a contract. This got me thinking: "Why stop at error codes, why not extend this concept to parameters and regular
return values as well?". This would enable more granular procedure overloading and more hardcore optimizations, but making it a general concept would also
introduce more noise beside the set of valid error codes, is they are specified along with regular "contracts". A similar concept also exists with
cpp concepts and Odin where statements, but I have not yet seen system that also covers the return value and is able to run checks at runtime. A system
like this, with opt in/out runtime checks seems like a very good idea, and although it might just end up being too inconvenient, it sure seems like it is
worth a try.

<h1>Summary</h1>
Although the syntax is not yet decided, *state changing* error handling will be done with error codes and with semantics that will provide a way of freely
choosing how general or specific you want to be when handling the error and an explicit way of stating all the possible error codes a procedure is able
to return.  
